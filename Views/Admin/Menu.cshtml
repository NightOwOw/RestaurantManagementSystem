@model IEnumerable<MenuItem>

<style>
    .menu-items {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .menu-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.2s;
    }

        .menu-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

    .status-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 12px;
    }

    .available {
        background-color: #28a745;
        color: white;
    }

    .out-of-stock {
        background-color: #dc3545;
        color: white;
    }

    .image-upload-container {
        border: 2px dashed #ddd;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .upload-placeholder {
        color: #666;
    }

        .upload-placeholder i {
            font-size: 48px;
            margin-bottom: 10px;
        }

    .list-view .menu-item {
        display: flex;
        margin-bottom: 10px;
        width: 100%;
    }

        .list-view .menu-item img {
            width: 150px;
            height: 150px;
            object-fit: cover;
        }
</style>

<div class="container-fluid">
    <div class="d-flex align-items-center mb-4">
        <a href="@Url.Action("AdminDashboard", "Admin")" class="btn btn-outline-secondary me-3">
            <i class="bi bi-arrow-left"></i> Dashboard
        </a>
        <h2>Menu Management</h2>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-secondary me-2" onclick="showCategoryModal()">
            <i class="bi bi-gear"></i>
        </button>
        <button class="btn btn-success" onclick="showAddItemModal()">
            <i class="bi bi-plus"></i> Add New Item
        </button>
    </div>

    <!-- Category Tabs -->
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <a class="nav-link active" data-category="all" href="#">
                All Items <span class="badge bg-secondary">(@Model.Count())</span>
            </a>
        </li>
        @foreach (var category in Model.Select(m => m.Category).Distinct())
        {
            <li class="nav-item">
                <a class="nav-link" data-category="@category" href="#">
                    @category <span class="badge bg-secondary">
                        (@Model.Count(m => m.Category == category))
                    </span>
                </a>
                <button class="btn btn-sm btn-outline-danger delete-category-btn ms-2" data-category="@category">
                    <i class="bi bi-trash"></i>
                </button>
            </li>
        }
    </ul>

    <!-- Search and Filters -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="position-relative">
            <input type="text" id="searchInput" class="form-control" placeholder="Search menu items..." style="width: 300px;">
            <i class="bi bi-search position-absolute" style="right: 10px; top: 50%; transform: translateY(-50%);"></i>
        </div>

        <div class="d-flex align-items-center gap-2">
            <div class="btn-group">
                <button class="btn btn-outline-secondary" data-view="grid">
                    <i class="bi bi-grid"></i>
                </button>
                <button class="btn btn-outline-secondary" data-view="list">
                    <i class="bi bi-list-ul"></i>
                </button>
            </div>

            <select id="filterSelect" class="form-select" style="width: 200px;">
                <option value="default" selected>Sort by: Default</option>
                <option value="name">Sort by: Name</option>
                <option value="price">Sort by: Price</option>
            </select>

            <button class="btn btn-outline-secondary">
                <i class="bi bi-funnel"></i>
                Filters
            </button>
        </div>
    </div>

    <!-- Menu Items Grid -->
    <div class="row g-4">
        @foreach (var item in Model)
        {
            <div class="menu-item col-lg-4" data-item-id="@item.Id" data-category="@item.Category.ToLower()">
                <div class="card h-100">
                    <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/api/placeholder/300/200" : item.ImageUrl)"
                         class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title mb-2">@item.Name</h5>
                        <p class="card-text text-muted">@item.Description</p>
                        <div class="mt-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-bold">$@item.Price.ToString("F2")</span>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary me-1" onclick="editItem(@item.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteItem(@item.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add/Edit Item Modal -->
<div class="modal fade" id="itemModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="itemForm" enctype="multipart/form-data">
                <input type="hidden" name="formType" id="formType" value="add" />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Item Name</label>
                                <input type="text" class="form-control" name="Name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" name="Description" rows="3"></textarea>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label class="form-label">Category</label>
                                    <select class="form-control" name="Category" required>
                                        <option value="">Select Category</option>
                                        @foreach (var category in Model.Select(m => m.Category).Distinct())
                                        {
                                            <option value="@category">@category</option>
                                        }
                                    </select>
                                </div>
                                <div class="col">
                                    <label class="form-label">Preparation Time (mins)</label>
                                    <input type="number" class="form-control" name="PrepTime">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label class="form-label">Regular Price ($)</label>
                                    <input type="number" class="form-control" name="Price" step="0.01" required>
                                </div>
                                <div class="col">
                                    <label class="form-label">Discount Price ($)</label>
                                    <input type="number" class="form-control" name="DiscountPrice" step="0.01">
                                </div>
                                <div class="col">
                                    <label class="form-label">Cost Price ($)</label>
                                    <input type="number" class="form-control" name="CostPrice" step="0.01">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="image-upload-container mb-3">
                                <input type="file" name="Image" id="imageUpload" hidden accept="image/*">
                                <div class="upload-placeholder">
                                    <i class="bi bi-cloud-upload"></i>
                                    <p>Drag and drop image here or</p>
                                    <button type="button" class="btn btn-outline-primary" onclick="$('#imageUpload').click()">
                                        Browse Files
                                    </button>
                                    <p class="mt-1 text-muted">PNG, JPG up to 5MB</p>
                                </div>
                                <img id="imagePreview" style="display:none; max-width:100%; height:auto;">
                            </div>
                            <div class="stock-management">
                                <h6>Stock Management</h6>
                                <div class="mb-2">
                                    <label class="form-label">Current Stock</label>
                                    <input type="number" class="form-control" name="CurrentStock">
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Low Stock Alert</label>
                                    <input type="number" class="form-control" name="LowStockAlert">
                                </div>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" name="AutoReorder">
                                    <label class="form-check-label">Enable auto reorder</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Item</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Category Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Category Management</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="newCategoryInput" placeholder="New category name...">
                    <button class="btn btn-primary" onclick="addCategory()">Add Category</button>
                </div>
                <div id="categoryList">
                    @foreach (var category in Model.Select(m => m.Category).Distinct())
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>@category</span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-1" onclick="editCategory('@category')">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteCategory('@category')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // View toggle
            $('[data-view]').click(function () {
                const view = $(this).data('view');
                $('[data-view]').removeClass('active');
                $(this).addClass('active');

                if (view === 'list') {
                    $('#menuItemsGrid').removeClass('row').addClass('list-view');
                } else {
                    $('#menuItemsGrid').addClass('row').removeClass('list-view');
                }
            });

            // Category filter
            $('.nav-tabs .nav-link').click(function (e) {
                e.preventDefault();
                const category = $(this).data('category').toLowerCase();
                console.log('Selected category:', category);

                $('.nav-tabs .nav-link').removeClass('active');
                $(this).addClass('active');

                if (category === 'all') {
                    $('.menu-item').show();
                    console.log('Showing all items');
                } else {
                    $('.menu-item').hide();
                    console.log(`Filtering items with category: ${category}`);
                    $(`.menu-item[data-category="${category}"]`).show();
                }
            });

            // Search functionality
            $('#searchInput').on('input', function () {
                const searchTerm = $(this).val().toLowerCase();
                $('.card').each(function () {
                    const itemName = $(this).find('.card-title').text().toLowerCase(); // Get item name
                    const isMatch = itemName.includes(searchTerm); // Check if item name matches search term
                    $(this).toggle(isMatch);
                });
            });

            // Image upload preview
            $('#imageUpload').change(function () {
                const file = this.files[0];
                if (file) {
                    if (file.size > 5 * 1024 * 1024) { // 5MB limit
                        alert('File size must be less than 5MB');
                        this.value = '';
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#imagePreview').attr('src', e.target.result).show();
                        $('.upload-placeholder').hide();
                    }
                    reader.readAsDataURL(file);
                }
            });

            // Form submission
            $('#itemForm').submit(function (e) {
                e.preventDefault();

                // Create form data object
                const formData = new FormData(this);
                const itemId = $('#itemId').val();

                // Validate required fields
                const name = formData.get('Name');
                const price = formData.get('Price');
                const category = formData.get('Category');

                if (!name || !price || !category) {
                    alert('Please fill in all required fields');
                    return;
                }

                // Handle image file
                const imageFile = $('#imageUpload')[0].files[0];
                if (imageFile) {
                    // Validate file size (5MB limit)
                    if (imageFile.size > 5 * 1024 * 1024) {
                        alert('Image file size must be less than 5MB');
                        return;
                    }
                    // Validate file type
                    if (!imageFile.type.match('image.*')) {
                        alert('Please upload an image file (PNG, JPG)');
                        return;
                    }
                    formData.append('image', imageFile);
                }

                // Show loading state
                const submitButton = $(this).find('button[type="submit"]');
                const originalText = submitButton.text();
                submitButton.prop('disabled', true).text('Saving...');

                // Determine URL based on operation type
                const url = itemId ? `/Admin/UpdateMenuItem/${itemId}` : '/Admin/SaveMenuItem';

                // Make AJAX request
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            $('#itemModal').modal('hide');
                            showNotification('Menu item saved successfully!', 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showNotification(response.message || 'Error saving menu item', 'danger');
                        }
                    },
                    error: function (xhr, status, error) {
                        let errorMessage = 'Error saving menu item';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        showNotification(errorMessage, 'danger');
                    },
                    complete: function () {
                        // Reset button state
                        submitButton.prop('disabled', false).text(originalText);
                    }
                });
            });

            $('#filterButton').click(function () {
                const filterType = $('#filterSelect').val(); // Get selected filter option
                const menuItems = $('.menu-item'); // Select all menu items

                // Handle sorting based on the selected filter type
                if (filterType === 'default') {
                    // Default: Do nothing (keep current order)
                    console.log('No sorting applied. Default order.');
                    return;
                }

                const sortedItems = menuItems.sort(function (a, b) {
                    if (filterType === 'name') {
                        // Sort by name (alphabetical order)
                        const nameA = $(a).find('.card-title').text().toLowerCase();
                        const nameB = $(b).find('.card-title').text().toLowerCase();
                        return nameA.localeCompare(nameB);
                    } else if (filterType === 'price') {
                        // Sort by price (low to high)
                        const priceA = parseFloat($(a).find('.fw-bold').text().replace('$', ''));
                        const priceB = parseFloat($(b).find('.fw-bold').text().replace('$', ''));
                        return priceA - priceB;
                    }
                });

                // Append the sorted items back to the grid container
                $('.row.g-4').empty().append(sortedItems);
            });

            // Category deletion functionality
            $(document).on('click', '.delete-category-btn', function () {
                const categoryName = $(this).data('category');
                const itemCount = $(`.menu-item[data-category="${categoryName.toLowerCase()}"]`).length;

                if (itemCount > 0) {
                    alert('Cannot delete category with existing items. Please remove or reassign items first.');
                    return;
                }

                if (confirm(`Delete category "${categoryName}"?`)) {
                    $.ajax({
                        url: '/Admin/DeleteCategory',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ name: categoryName }),
                        success: function (response) {
                            if (response.success) {
                                $(`[data-category="${categoryName}"]`).closest('.nav-item').remove();
                                alert('Category deleted successfully');
                            } else {
                                alert(response.message);
                            }
                        },
                        error: () => alert('Error deleting category')
                    });
                }
            });

            // Drag and drop functionality
            const uploadContainer = document.querySelector('.image-upload-container');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadContainer.addEventListener(eventName, preventDefaults, false);
            });
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function highlight(e) {
            uploadContainer.classList.add('border-primary');
        }

        function unhighlight(e) {
            uploadContainer.classList.remove('border-primary');
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            if (files.length) {
                $('#imageUpload')[0].files = files;
                handleFiles(files);
            }
        }

        function handleFiles(files) {
            const file = files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    $('#imagePreview').attr('src', e.target.result).show();
                    $('.upload-placeholder').hide();
                }
                reader.readAsDataURL(file);
            }
        }

        function showAddItemModal() {
            $('#itemForm')[0].reset();
            $('#imagePreview').hide();
            $('.upload-placeholder').show();
            $('.modal-title').text('Add New Menu Item');
            $('#itemModal').modal('show');
        }

        function editItem(id) {
            $.get(`/Admin/GetMenuItem/${id}`)
                .done(function (item) {
                    $('#itemModal').modal('show');
                    $('.modal-title').text('Edit Menu Item');

                    $('input[name="Name"]').val(item.name);
                    $('textarea[name="Description"]').val(item.description);
                    $('input[name="Price"]').val(item.price);
                    $('select[name="Category"]').val(item.category);

                    if (!$('#itemId').length) {
                        $('<input>').attr({
                            type: 'hidden',
                            id: 'itemId',
                            name: 'Id',
                            value: id
                        }).appendTo('#itemForm');
                    } else {
                        $('#itemId').val(id);
                    }

                    if (item.imageUrl) {
                        $('#imagePreview').attr('src', item.imageUrl).show();
                        $('.upload-placeholder').hide();
                    }
                })
                .fail(function () {
                    alert('Error fetching menu item details');
                });
        }

        function deleteItem(id) {
            if (confirm('Are you sure you want to delete this item? This action cannot be undone.')) {
                $.post(`/Admin/DeleteMenuItem/${id}`)
                    .done(function (response) {
                        if (response.success) {
                            $(`[data-item-id="${id}"]`).fadeOut(400, function () {
                                $(this).remove();
                                updateCategoryCounts();
                            });
                        } else {
                            alert('Error deleting item');
                        }
                    })
                    .fail(function () {
                        alert('Error deleting item');
                    });
            }
        }

        function updateCategoryCounts() {
            const categories = {};
            $('.menu-item').each(function () {
                const category = $(this).data('category');
                categories[category] = (categories[category] || 0) + 1;
            });

            const totalItems = $('.menu-item').length;
            $('[data-category="all"] .badge').text(`(${totalItems})`);

            Object.keys(categories).forEach(category => {
                $(`[data-category="${category}"] .badge`).text(`(${categories[category]})`);
            });
        }

        function showNotification(message, type = 'success') {
            const notification = $(`
                        <div class="alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3"
                             style="z-index: 1050;" role="alert">
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `);

            $('body').append(notification);
            setTimeout(() => {
                notification.fadeOut(300, function () {
                    $(this).remove();
                });
            }, 3000);
        }

        function showCategoryModal() {
            $('#categoryModal').modal('show');
        }

        function addCategory() {
            const name = $('#newCategoryInput').val().trim();
            if (!name) {
                alert('Category name cannot be empty');
                return;
            }

            $.ajax({
                url: '/Admin/AddCategory',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(name),
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload(); // Reload the page to reflect the changes
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert('Error adding category');
                }
            });
        }

        function editCategory(name) {
            const newName = prompt('Enter new category name:', name);
            if (newName) {
                $.post('/Admin/UpdateCategory', { oldName: name, newName: newName }, function () {
                    location.reload();
                });
            }
        }

        function deleteCategory(name) {
            if (confirm(`Are you sure you want to delete the category "${name}"?`)) {
                $.post('/Admin/DeleteCategory', { name: name }, function () {
                    location.reload();
                });
            }
        }
    </script>
}